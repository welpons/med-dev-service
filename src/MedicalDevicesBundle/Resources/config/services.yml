parameters:
    med.devices.services.init: '%med.devices.services.params%'
        
        
services:
    # External services. Based on third party components    
    ext.services.serializer:
        class: MedicalDevicesBundle\ExternalServices\Serializer        
        arguments: ['@init']
    ext.services.validation.error.handler:
        class: MedicalDevicesBundle\ExternalServices\ValidationErrorHandler
        
    # Framawork services. Based on tool provided by Symfony framawork     
    init.factory:
        class: MedicalDevicesBundle\Framework\ConfigFactory
        arguments: ['@service_container']        
    init: 
        class: MedicalDevices\Configuration\Configuration
        factory: 'init.factory:createConfiguration'
    repository.collection.provider:
        class: MedicalDevicesBundle\Framework\RepositoryCollectionProvider
        arguments: ["@init", "@doctrine.orm.entity_manager", "@ext.services.serializer"]        
    repository.factory.abstract:
        class: MedicalDevicesBundle\Framework\AbstractRepositoryFactory
        abstract: true
        arguments: ['@init', '@doctrine.orm.entity_manager', '@ext.services.serializer']
    repository.factory.device:
        class: MedicalDevicesBundle\Framework\RepositoryFactory        
        arguments: ["MedicalDevices\\Infrastructure\\Persistence\\Doctrine\\DoctrineDeviceRepository", ["em"]]        
        tags:
            - { name: repository.factory }   
    repository.factory.device_identifier:
        class: MedicalDevicesBundle\Framework\RepositoryFactory        
        arguments: ["MedicalDevices\\Infrastructure\\Persistence\\Doctrine\\DoctrineDeviceIdentifierRepository", ["em"]]        
        tags:
            - { name: repository.factory } 
    repository.factory.event_store:
        class: MedicalDevicesBundle\Framework\RepositoryFactory        
        arguments: ["MedicalDevices\\Infrastructure\\Application\\Notification\\DoctrineEventStoreRepository", ["em", "serializer"]]        
        tags:
            - { name: repository.factory }    
    repository.factory.device_category:
        class: MedicalDevicesBundle\Framework\RepositoryFactory        
        arguments: ["MedicalDevices\\Infrastructure\\Persistence\\JsonFile\\JsonFileDeviceCategoryRepository", ["init"]]        
        tags:
            - { name: repository.factory }   
    repository.factory.device_model:
        class: MedicalDevicesBundle\Framework\RepositoryFactory        
        arguments: ["MedicalDevices\\Infrastructure\\Persistence\\JsonFile\\JsonFileDeviceModelRepository", ["init"]]        
        tags:
            - { name: repository.factory }  
    repository.factory.device_type:
        class: MedicalDevicesBundle\Framework\RepositoryFactory        
        arguments: ["MedicalDevices\\Infrastructure\\Persistence\\JsonFile\\JsonFileDeviceTypeRepository", ["init"]]        
        tags:
            - { name: repository.factory }             
            

